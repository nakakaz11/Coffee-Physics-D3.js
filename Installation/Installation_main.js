// Generated by CoffeeScript 1.6.3
var end,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

end = null;

require.config({
  baseUrl: "./",
  paths: {
    jquery: "//cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min",
    d3: "//cdnjs.cloudflare.com/ajax/libs/d3/3.3.11/d3.min",
    Stats: "//cdnjs.cloudflare.com/ajax/libs/stats.js/r11/Stats",
    dat: "//cdnjs.cloudflare.com/ajax/libs/dat-gui/0.5/dat.gui.min",
    colorbrewer: "//samuraiworks.org/_demos/swCoffeePhysics/js/lib/colorbrewerSW/colorbrewer",
    _Engine: "//samuraiworks.org/_demos/swCoffeePhysics/Installation/_CombineEngine"
  },
  shim: {
    jquery: {
      exports: "$"
    },
    d3: {
      exports: "d3"
    }
  },
  _Engine: {
    deps: ["d3"]
  },
  init: {
    deps: ["jquery", "Stats", "dat"]
  }
});

define(["jquery", "colorbrewer", "Stats", "dat", "d3", "_Engine"], function($, _, d3) {
  var SWDemo;
  SWDemo = (function(_super) {
    var _swns;

    __extends(SWDemo, _super);

    _swns = {};

    function SWDemo(globalSwobj, _config) {
      SWDemo.__super__.constructor.apply(this, arguments);
      _swns.opt = globalSwobj;
      _swns.config = _config;
    }

    SWDemo.prototype.setup = function(full) {
      var attraction, i, max, p, s, wander, _i, _results;
      if (full == null) {
        full = true;
      }
      SWDemo.__super__.setup.apply(this, arguments);
      this.physics.integrator = new ImprovedEuler();
      attraction = new Attraction(this.mouse.pos, _swns.config._aRadius || 1000, _swns.config._aStrength || 100.0);
      this.gravity = new ConstantForce(new Vector(_swns.config._forceX || 0.0, _swns.config._forceY || 0.0));
      this.physics.behaviours.push(this.gravity);
      this.stiffness = _swns.config._stiffness || 0.99;
      wander = new Wander(_swns.config._wJitter || 0.2, _swns.config._wRadius || 1111, _swns.config._wStrength || 3);
      max = _swns.config._particleLEN || (full ? 111 : 77);
      _results = [];
      for (i = _i = 0; 0 <= max ? _i <= max : _i >= max; i = 0 <= max ? ++_i : --_i) {
        p = new Particle(Random(0.25, 4.0));
        p.setRadius(p.mass * (_swns.config._radius || 2));
        switch (true) {
          case _swns.config._flag2:
            p.behaviours.push(wander);
            p.behaviours.push(attraction);
            break;
          default:
            null;
        }
        p.moveTo(new Vector(Random(this.width), Random(this.height)));
        s = new Spring(this.mouse, p, Random(_swns.config._sprRandMin || 290, _swns.config._sprRandMax || 300, this.stiffness));
        this.physics.particles.push(p);
        switch (true) {
          case _swns.config._flag1:
            _results.push(this.physics.springs.push(s));
            break;
          default:
            _results.push(null);
        }
      }
      return _results;
    };

    SWDemo.prototype.init = function() {
      return SWDemo.__super__.init.apply(this, arguments);
    };

    return SWDemo;

  })(Demo);
  return (function() {
    var $renderer, DEMOS, changer1, changer10, changer11, changer12, changer13, changer14, changer15, changer16, changer17, changer18, changer2, changer3, changer4, changer5, changer8, changer9, config, container, d3ns, demo, demoName, gControl, generateClick, gui, init, initIros, integrators, items, list, onKeyDown, pControl, playing, renderer, resizeForSMPOnce, sControl, setDemo, stats, update, _config;
    config = {
      "COLOR_Val": "CB-Greys",
      "ConsoleAndBool": true,
      "_flag1": true,
      "_flag2": true,
      "_gradient": false,
      "_shape": true,
      "粘度(viscosity)": 0.836,
      "剛性(stiffness)": 0.065,
      "mouseMass": 99,
      "mouseMassInv": 0.001,
      "forceX": 0,
      "forceY": 0,
      "integratorVal": "integratorNone",
      "radius": 1,
      "attractRadius": 1000,
      "attractStrength": 100.0,
      "wanderJitter": 0.00001,
      "wanderRadius": 0.0001,
      "wanderStrength": 0.00003,
      "springRandMin": 33,
      "springRandMax": 333,
      "particleLEN": 222,
      "integratorNone": new Verlet,
      "vB_hasDelaunay": false,
      "vB_hasVoronoi": true
    };
    integrators = {
      "integratorNone": new Integrator,
      "Euler": new Euler,
      "ImprovedEuler": new ImprovedEuler,
      "Verlet": new Verlet
    };
    initIros = {
      "COLOURS0": ['DC0048', 'F14646', '4AE6A9', '7CFF3F', '4EC9D9', 'E4272E'],
      "COLOUR_SW1": ['6CB1DC', 'EFF13E', '4AE6A9', '7CFF3F', 'F46AC0', 'E4A043'],
      "COLOUR_SW2": ['ffffff', 'e7e7e7', 'cdcdcd', 'C9C1AF', 'DAFFEF', 'C9DAFF'],
      "COLOUR_SW3": ['30928c', '357c9f', '4ec4ae', '31946f', '4a9ac2', '71becf'],
      "CB-YlGn": colorbrewer.YlGn[9],
      "CB-YlGnBu": colorbrewer.YlGnBu[9],
      "CB-GnBu": colorbrewer.GnBu[9],
      "CB-BuGn": colorbrewer.BuGn[9],
      "CB-PuBuGn": colorbrewer.PuBuGn[9],
      "CB-PuBu": colorbrewer.PuBu[9],
      "CB-BuPu": colorbrewer.BuPu[9],
      "CB-RdPu": colorbrewer.RdPu[9],
      "CB-PuRd": colorbrewer.PuRd[9],
      "CB-OrRd": colorbrewer.OrRd[9],
      "CB-YlOrRd": colorbrewer.YlOrRd[9],
      "CB-YlOrBr": colorbrewer.YlOrBr[9],
      "CB-Purples": colorbrewer.Purples[9],
      "CB-Blues": colorbrewer.Blues[9],
      "CB-Greens": colorbrewer.Greens[9],
      "CB-Oranges": colorbrewer.Oranges[9],
      "CB-Reds": colorbrewer.Reds[9],
      "CB-Greys": colorbrewer.Greys[9],
      "CB-PuOr": colorbrewer.PuOr[11],
      "CB-BrBG": colorbrewer.BrBG[11],
      "CB-PRGn": colorbrewer.PRGn[11],
      "CB-PiYG": colorbrewer.PiYG[11],
      "CB-RdBu": colorbrewer.RdBu[11],
      "CB-RdGy": colorbrewer.RdGy[11],
      "CB-RdYlBu": colorbrewer.RdYlBu[11],
      "CB-Spectral": colorbrewer.Spectral[11],
      "CB-RdYlGn": colorbrewer.RdYlGn[11],
      "CB-Accent": colorbrewer.Accent[8],
      "CB-Dark2": colorbrewer.Dark2[8],
      "CB-Paired": colorbrewer.Paired[12],
      "CB-Pastel1": colorbrewer.Pastel1[9],
      "CB-Pastel2": colorbrewer.Pastel2[8],
      "CB-Set1": colorbrewer.Set1[9],
      "CB-Set2": colorbrewer.Set2[8],
      "CB-Set3": colorbrewer.Set3[12]
    };
    d3ns = {};
    _config = {
      v3D: null
    };
    _config = config;
    DEMOS = {
      "Installation_sw(chain)": SWDemo
    };
    list = void 0;
    demo = void 0;
    stats = void 0;
    items = void 0;
    playing = void 0;
    demoName = void 0;
    renderer = void 0;
    container = void 0;
    $renderer = void 0;
    generateClick = function(name) {
      return function() {
        setDemo(name);
        return false;
      };
    };
    update = function() {
      requestAnimationFrame(update);
      if (playing && demo) {
        demo.step();
      }
      return stats.update();
    };
    resizeForSMPOnce = function(demoName) {
      var delta, resizeend, rtime, timeout;
      rtime = new Date(1999, 11, 31, 23, 59, 59);
      timeout = false;
      delta = 200;
      resizeend = function() {
        if (new Date() - rtime < delta) {
          return setTimeout(resizeend, delta);
        } else {
          timeout = false;
          return setDemo("Installation_sw(chain)");
        }
      };
      return $(window).on("resize", function(e) {
        rtime = new Date();
        if (timeout === false) {
          timeout = true;
          return setTimeout(resizeend, delta);
        }
      });
    };
    setDemo = function(name) {
      var id;
      demoName = name;
      _config.demoName = demoName;
      if (demo) {
        demo.destroy();
        demo = null;
      }
      demo = new DEMOS[name]("swAugtest", _config);
      demo.init(container[0], new self[renderer]("swAugtest", _config, d3ns));
      for (id in items) {
        if (id === name) {
          items[id].addClass("active");
        } else {
          items[id].removeClass("active");
        }
      }
      return self.__demo = demo;
    };
    onKeyDown = function(event) {
      if (event.which === 32 || event.which === 80) {
        event.preventDefault();
        playing = !playing;
        if (playing && demo) {
          return demo.physics._clock = new Date().getTime();
        }
      }
    };
    init = function() {
      var item;
      items = {};
      stats = new Stats();
      list = $("#demo-select");
      playing = true;
      renderer = "d3SVGRenderer";
      container = $("#container");
      $renderer = $("#renderer-select a");
      item = void 0;
      /*for name of DEMOS
        item = $("<a href=\"#\"/>").on("click", generateClick(name) )
        .data("demo", name).text(name)
        items[name] = item
        list.append item
      */

      stats.domElement.className = "stats";
      document.body.appendChild(stats.domElement);
      $(window).bind("keydown", onKeyDown);
      setDemo("Installation_sw(chain)");
      _config.demoName = "Installation_sw(chain)";
      update();
      return _config.demo = demo;
    };
    gui = new dat.GUI();
    gControl = gui.addFolder("GlobalControl");
    gControl.open();
    pControl = gui.addFolder("ParticleControl");
    sControl = gui.addFolder("SubControl");
    changer11 = gControl.add(config, "COLOR_Val", Object.keys(initIros));
    changer11.onChange(function(val) {
      _config._COLOURS = initIros[val];
      return setDemo(demoName);
    });
    changer2 = gControl.add(config, "粘度(viscosity)", 0, 1.00);
    changer2.onChange(function(value) {
      _config._viscosity = value;
      return demo.physics.viscosity = _config["_viscosity"];
    });
    changer4 = gControl.add(config, "forceX", -1000, 1000);
    changer4.onChange(function(value) {
      _config._forceX = value;
      return demo.gravity.force.x = _config["forceX"];
    });
    changer5 = gControl.add(config, "forceY", -1000, 1000);
    changer5.onChange(function(value) {
      _config._forceY = value;
      return demo.gravity.force.y = _config["forceY"];
    });
    /*changer7 = gControl.add(config, "integratorVal", Object.keys(integrators) )
    changer7.onChange (val) ->
      _config.integrator = integrators[val]
      demo.physics.integrator = _config.integrator
    */

    changer8 = pControl.add(config, "radius", 1, 95);
    changer8.onChange(function(value) {
      _config._radius = value;
      return setDemo(demoName);
    });
    changer3 = pControl.add(config, "剛性(stiffness)", 0.000, 1.000);
    changer3.onChange(function(value) {
      _config._stiffness = value;
      demo.stiffness = value;
      return setDemo(demoName);
    });
    changer9 = pControl.add(config, "attractRadius", -3333, 3333);
    changer9.onChange(function(value) {
      _config._aRadius = value;
      return setDemo(demoName);
    });
    changer10 = pControl.add(config, "attractStrength", -3333, 3333);
    changer10.onChange(function(value) {
      _config._aStrength = value;
      return setDemo(demoName);
    });
    changer12 = pControl.add(config, "wanderJitter", 0.000, 1.000);
    changer12.onChange(function(value) {
      _config._wJitter = value;
      return setDemo(demoName);
    });
    changer13 = pControl.add(config, "wanderRadius", 0.0001, 333);
    changer13.onChange(function(value) {
      _config._wRadius = value;
      return setDemo(demoName);
    });
    changer14 = pControl.add(config, "wanderStrength", 0.0000, 10.0000);
    changer14.onChange(function(value) {
      _config._wStrength = value;
      return setDemo(demoName);
    });
    changer15 = sControl.add(config, "springRandMin", 0.01, 555);
    changer15.onChange(function(value) {
      _config._sprRandMin = value;
      return setDemo(demoName);
    });
    changer16 = sControl.add(config, "springRandMax", 0.01, 555);
    changer16.onChange(function(value) {
      _config._sprRandMax = value;
      return setDemo(demoName);
    });
    changer17 = sControl.add(config, "particleLEN", 3, 333);
    changer17.onChange(function(value) {
      _config._particleLEN = value;
      return setDemo(demoName);
    });
    changer1 = sControl.add(config, "ConsoleAndBool").listen();
    changer1.onChange(function(value) {
      _config._flag1 = value;
      setDemo(demoName);
      return typeof console !== "undefined" && console !== null ? console.info("demo:", demo) : void 0;
    });
    changer18 = sControl.add(config, "_flag2").listen();
    changer18.onChange(function(value) {
      _config._flag2 = value;
      return setDemo(demoName);
    });
    init();
    return resizeForSMPOnce();
  })();
});
